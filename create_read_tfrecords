#coding：utf-8
import os
import tensorflow as tf
from PIL import Image
import numpy as np
#cwd = os.getcwd()
cwd = 'E:/Experiments/tensorflow-vgg-master/fer2013/Train'
'''
此处我加载的数据目录如下：
0 -- img1.jpg
     img2.jpg
     img3.jpg
     ...
1 -- img1.jpg
     img2.jpg
     ...
2 -- ...
 这里的0， 1， 2...就是类别，也就是下文中的classes
 classes是我根据自己数据类型定义的一个列表，大家可以根据自己的数据情况灵活运用
...
'''
classes=['Angry','Disgust','Fear','Happy','Neutral','Sad','Surprise']
def _int64_feature(value):
  return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))
def _bytes_feature(value):
  return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))

def train_tfrecord():
    cwd = 'E:/Experiments/tensorflow-vgg-master/fer2013/Train'
    writer = tf.python_io.TFRecordWriter("train.tfrecords")
    for index, name in enumerate(classes):
        class_path = cwd + '/' + name + "/"
        for img_name in os.listdir(class_path):
            img_path = class_path + img_name
            img = Image.open(img_path)
            img = img.resize((144, 144))
            img_raw = img.tobytes()  # 将图片转化为原生bytes
            example = tf.train.Example(features=tf.train.Features(feature={
                "label": _int64_feature(index),
                'img_raw': _bytes_feature(img_raw)
            }))
            writer.write(example.SerializeToString())  # 序列化为字符串
    writer.close()
def val_tfrecord():
    cwd = 'E:/Experiments/tensorflow-vgg-master/fer2013/PrivateTest'
    writer = tf.python_io.TFRecordWriter("val.tfrecords")
    for index, name in enumerate(classes):
        class_path = cwd + '/'+name + "/"
        for img_name in os.listdir(class_path):
            img_path = class_path + img_name
            img = Image.open(img_path)
            img = img.resize((144, 144))
            img_raw = img.tobytes()              #将图片转化为原生bytes
            example = tf.train.Example(features=tf.train.Features(feature={
                "label": _int64_feature(index),
                'img_raw': _bytes_feature(img_raw)
            }))
            writer.write(example.SerializeToString())  #序列化为字符串
    writer.close()
def test_tfrecord():
    cwd = 'E:/Experiments/tensorflow-vgg-master/fer2013/PublicTest'
    writer = tf.python_io.TFRecordWriter("test.tfrecords")
    for index, name in enumerate(classes):
        class_path = cwd + '/'+name + "/"
        for img_name in os.listdir(class_path):
            img_path = class_path + img_name
            img = Image.open(img_path)
            img = img.resize((144, 144))
            img_raw = img.tobytes()              #将图片转化为原生bytes
            example = tf.train.Example(features=tf.train.Features(feature={
                "label": _int64_feature(index),
                'img_raw': _bytes_feature(img_raw)
            }))
            writer.write(example.SerializeToString())  #序列化为字符串
    writer.close()

def read_and_decode(filename):
    filename_queue=tf.train.string_input_producer([filename])
    reader=tf.TFRecordReader()
    _,serialized_exemple=reader.read(filename_queue)
    features=tf.parse_single_example(serialized_exemple,
                                     features={
                                         'label':tf.FixedLenFeature([],tf.int64),
                                         'img_raw':tf.FixedLenFeature([],tf.string)
                                     })
    img=tf.decode_raw(features['img_raw'],tf.uint8)
    img=tf.reshape(img,[144,144,1])
    img=tf.cast(img,tf.float32)*(1./255)-0.5
    label=tf.cast(features['label'],tf.int32)
    return img,label

# train_tfrecord()
# test_tfrecord()
# val_tfrecord()
img, label = read_and_decode("train.tfrecords")
#使用shuffle_batch可以随机打乱输入
img_batch, label_batch = tf.train.shuffle_batch([img, label],
                                                batch_size=30, capacity=50000,
                                                min_after_dequeue=10000)

init = tf.initialize_all_variables()
with tf.Session() as sess:
    sess.run(init)
    threads = tf.train.start_queue_runners(sess=sess)
    for i in range(100):
        val, k= sess.run([img_batch, label_batch])
        #我们也可以根据需要对val， l进行处理
        #l = to_categorical(l, 12)
        print(val.shape, k)
